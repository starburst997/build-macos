default_platform(:mac)

platform :mac do
  desc "Sync codesigning certificates"
  lane :sync_certificates do
    if ENV['USE_SESSION'] != 'true'
      app_store_connect_api_key(
        key_id: ENV["APPSTORE_KEY_ID"],
        issuer_id: ENV["APPSTORE_ISSUER_ID"],
        key_content: ENV['APPSTORE_P8'],
        in_house: false
      )
    end

    build_type = ENV.fetch('BUILD_TYPE', 'developer-id')

    if build_type == 'appstore'
      match(
        type: "appstore",
        additional_cert_types: "mac_installer_distribution",
        storage_mode: "git",
        git_url: "git@github.com:#{ENV['MATCH_REPOSITORY']}.git",
        app_identifier: ENV["MAC_BUNDLE_ID"]
      )
    elsif build_type == 'developer-id'
      match(
        type: "developer_id",
        storage_mode: "git",
        git_url: "git@github.com:#{ENV['MATCH_REPOSITORY']}.git",
        app_identifier: ENV["MAC_BUNDLE_ID"]
      )
    elsif build_type == 'pkg'
      match(
        type: "developer_id",
        additional_cert_types: "developer_id_installer",
        storage_mode: "git",
        git_url: "git@github.com:#{ENV['MATCH_REPOSITORY']}.git",
        app_identifier: ENV["MAC_BUNDLE_ID"]
      )
    end
  end

  desc "Build unsigned app for testing"
  lane :build_unsigned do
    build_mac_app(
      export_method: ENV.fetch('EXPORT_METHOD', 'mac-application'),
      workspace: ENV['WORKSPACE_PATH'],
      output_directory: ENV.fetch('OUTPUT_DIRECTORY', 'dist'),
      output_name: ENV['OUTPUT_NAME'],
      scheme: ENV['SCHEME']
    )
  end

  desc "Build and sign app with Developer ID"
  lane :build_signed do
    setup_ci

    sync_certificates

    # Unity has specific requirements around codesigning that we have to handle
    # See https://github.com/fastlane/fastlane/discussions/17458 for context
    update_code_signing_settings(
      use_automatic_signing: true,
      path: ENV['PROJECT_PATH']
    )

    update_code_signing_settings(
      use_automatic_signing: false,
      team_id: ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_developer_id_macos_team-id"],
      code_sign_identity: 'Developer ID Application',
      targets: ENV['SCHEME'],
      bundle_identifier: ENV["MAC_BUNDLE_ID"],
      path: ENV['PROJECT_PATH'],
      profile_name: ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_developer_id_macos_profile-name"],
      profile_uuid: ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_developer_id_macos"]
    )

    # Enable Hardened Runtime (required for notarization)
    update_project_provisioning(
      xcodeproj: ENV['PROJECT_PATH'],
      target_filter: ENV['SCHEME'],
      build_configuration: "Release"
    )

    build_mac_app(
      export_method: ENV.fetch('EXPORT_METHOD', 'developer-id'),
      workspace: ENV['WORKSPACE_PATH'],
      output_directory: ENV.fetch('OUTPUT_DIRECTORY', 'dist'),
      output_name: ENV['OUTPUT_NAME'],
      scheme: ENV['SCHEME'],
      xcargs: '-allowProvisioningUpdates ENABLE_HARDENED_RUNTIME=YES OTHER_CODE_SIGN_FLAGS="--timestamp --options=runtime"',
      export_options: {
        provisioningProfiles: {
          ENV["MAC_BUNDLE_ID"] => ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_developer_id_macos_profile-name"]
        }
      }
    )

    # Notarize the app if enabled
    if ENV['ENABLE_NOTARIZATION'] == 'true'
      notarize(
        package: "#{ENV.fetch('OUTPUT_DIRECTORY', 'dist')}/#{ENV['OUTPUT_NAME']}.app",
        bundle_id: ENV["MAC_BUNDLE_ID"],
        username: ENV["APPLE_CONNECT_EMAIL"],
        print_log: true
      )
    end
  end

  desc "Build app for App Store"
  lane :build_appstore do
    setup_ci

    sync_certificates

    # Unity has specific requirements around codesigning that we have to handle
    # See https://github.com/fastlane/fastlane/discussions/17458 for context
    update_code_signing_settings(
      use_automatic_signing: true,
      path: ENV['PROJECT_PATH']
    )

    update_code_signing_settings(
      use_automatic_signing: false,
      team_id: ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_appstore_macos_team-id"],
      code_sign_identity: 'Apple Distribution',
      targets: ENV['SCHEME'],
      bundle_identifier: ENV["MAC_BUNDLE_ID"],
      path: ENV['PROJECT_PATH'],
      profile_name: ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_appstore_macos_profile-name"],
      profile_uuid: ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_appstore_macos"],
      build_configurations: ['Release']
    )

    build_mac_app(
      export_method: 'app-store',
      workspace: ENV['WORKSPACE_PATH'],
      output_directory: ENV.fetch('OUTPUT_DIRECTORY', 'dist'),
      output_name: ENV['OUTPUT_NAME'],
      scheme: ENV['SCHEME'],
      xcargs: '-allowProvisioningUpdates',
      export_options: {
        provisioningProfiles: {
          ENV["MAC_BUNDLE_ID"] => ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_appstore_macos_profile-name"]
        }
      }
    )

    # Upload to TestFlight if enabled
    if ENV['UPLOAD_TO_TESTFLIGHT'] == 'true'
      upload_to_testflight(
        skip_waiting_for_build_processing: ENV['SKIP_WAITING_FOR_BUILD_PROCESSING'] == 'true'
      )
    end
  end

  desc "Build PKG installer with Developer ID"
  lane :build_pkg do
    setup_ci

    sync_certificates

    # Unity has specific requirements around codesigning that we have to handle
    # See https://github.com/fastlane/fastlane/discussions/17458 for context
    update_code_signing_settings(
      use_automatic_signing: true,
      path: ENV['PROJECT_PATH']
    )

    update_code_signing_settings(
      use_automatic_signing: false,
      team_id: ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_developer_id_macos_team-id"],
      code_sign_identity: 'Developer ID Installer',
      targets: ENV['SCHEME'],
      bundle_identifier: ENV["MAC_BUNDLE_ID"],
      path: ENV['PROJECT_PATH'],
      profile_name: ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_developer_id_macos_profile-name"],
      profile_uuid: ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_developer_id_macos"],
      build_configurations: ['Release']
    )

    build_mac_app(
      export_method: 'package',
      workspace: ENV['WORKSPACE_PATH'],
      output_directory: ENV.fetch('OUTPUT_DIRECTORY', 'dist'),
      output_name: ENV['OUTPUT_NAME'],
      scheme: ENV['SCHEME'],
      xcargs: '-allowProvisioningUpdates',
      export_options: {
        provisioningProfiles: {
          ENV["MAC_BUNDLE_ID"] => ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_developer_id_macos_profile-name"]
        }
      }
    )

    # Notarize the pkg if enabled
    if ENV['ENABLE_NOTARIZATION'] == 'true'
      notarize(
        package: "#{ENV.fetch('OUTPUT_DIRECTORY', 'dist')}/#{ENV['OUTPUT_NAME']}.pkg",
        bundle_id: ENV["MAC_BUNDLE_ID"],
        username: ENV["APPLE_CONNECT_EMAIL"],
        print_log: true
      )
    end
  end
end
